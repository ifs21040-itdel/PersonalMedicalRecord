private
require('dotenv').config();
const { Web3 } = require('web3');
const fs = require('fs-extra');

// Configure Web3 to use legacy transactions
const web3 = new Web3(process.env.ETH_VERIFICATION_INFURA_URL);

// Disable EIP-1559 to force legacy transactions
web3.eth.defaultTransactionType = '0x0'; // Legacy transaction type

// Fungsi untuk meminta input dari terminal
const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
});

// Minta input private key dari user
readline.question('Masukkan Ethereum Private Key: ', async (ethPrivateKey) => {
    try {
        if (!ethPrivateKey.startsWith('0x')) {
            ethPrivateKey = '0x' + ethPrivateKey;
        }

        // Inisialisasi akun dengan private key
        const account = web3.eth.accounts.privateKeyToAccount(ethPrivateKey);
        web3.eth.accounts.wallet.add(account);
        web3.eth.defaultAccount = account.address;

        console.log('Akun Ethereum:', account.address);

        // Check network compatibility
        try {
            const chainId = await web3.eth.getChainId();
            console.log('Chain ID:', chainId);
            
            // Check if network supports EIP-1559
            const block = await web3.eth.getBlock('latest');
            console.log('Latest block baseFeePerGas:', block.baseFeePerGas);
        } catch (e) {
            console.log('Network info check:', e.message);
        }

        // Baca file kontrak secara async
        const source = JSON.parse(fs.readFileSync(process.env.ETH_VERIFICATION_CONTRACT_PATH, 'utf8'));

        if (!source.abi || !source.bytecode) {
            throw new Error('Data ABI atau Bytecode tidak tersedia di file kontrak.');
        }

        const { abi, bytecode } = source;

        // Set gas price to 0
        const gasPrice = '0';
        console.log('Using Gas Price: 0 (free transactions)');

        // Deploy kontrak
        console.log('Mendeploy kontrak verification...');
        const contract = new web3.eth.Contract(abi);
        
        // Create deployment transaction manually
        const deployTx = contract.deploy({ data: bytecode });
        
        // Estimate gas
        const gasEstimate = await deployTx.estimateGas({ from: account.address });
        console.log('Estimated Gas:', gasEstimate);

        // Convert BigInt to Number for calculation
        const gasEstimateNumber = Number(gasEstimate);
        const gasLimit = Math.floor(gasEstimateNumber * 1.3); // Add 30% buffer
        
        console.log('Gas Limit:', gasLimit);

        // Send transaction with explicit legacy parameters
        const contractInstance = await deployTx.send({
            from: account.address,
            gas: gasLimit.toString(), // Convert to string
            gasPrice: gasPrice, // Explicit gasPrice for legacy transaction
            type: '0x0' // Force legacy transaction type
        });

        const contractAddress = contractInstance.options.address;
        console.log('Kontrak berhasil dideploy di:', contractAddress);

        // Verify deployment
        const code = await web3.eth.getCode(contractAddress);
        if (code === '0x') {
            throw new Error('Contract deployment failed - no code at address');
        }
        console.log('Contract deployment verified!');

        // Simpan alamat kontrak ke file address.txt
        const saveLocation = "./helper/contracts/VERIFICATION_CONTRACT_ADDRESS.txt";
        fs.writeFileSync(saveLocation, contractAddress);
        console.log(`Alamat kontrak disimpan ke: ${saveLocation}`);
    } catch (error) {
        console.error('Terjadi kesalahan:', error.message);
        if (error.receipt) {
            console.error('Transaction receipt:', error.receipt);
        }
    } finally {
        readline.close();
    }
});